# These substitutions allow the end user to override certain values
substitutions:
  name: esp32_s3_matrix
  friendly_name: esp32_s3_matrix

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: true
  platformio_options:
    board_build.flash_mode: dio
  project:
    name: esphome.web
    version: dev

api:
  encryption:
    key: !secret api_key

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 192.168.X.X  # Change this to match your network
    gateway: 192.168.X.1
    subnet: 255.255.255.0

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: recommended

# Enable logging
logger:

# Allow Over-The-Air updates
ota:
  - platform: esphome
    password: !secret ota_password

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

  - platform: uptime
    name: "Uptime"
    filters:
      - lambda: return x / 3600;
    unit_of_measurement: "h"

  # Home Assistant sensor for indoor temperature
  - platform: homeassistant
    id: indoor_temp_sensor # Unique ID to reference this sensor in code
    entity_id: sensor.average_indoor_temperature # The entity ID from Home Assistant
    name: "Average Indoor Temperature"
    unit_of_measurement: "Â°C" # Set appropriate unit of measurement
    accuracy_decimals: 1 # Show temperature with one decimal place for precision
    force_update: true # Ensure updates even if value doesn't change significantly

  # Home Assistant sensor for indoor humidity
  - platform: homeassistant
    id: indoor_humidity_sensor # Unique ID to reference this sensor
    entity_id: sensor.average_indoor_humidity # The entity ID from Home Assistant
    name: "Average Indoor Humidity"
    unit_of_measurement: "%" # Set appropriate unit of measurement
    accuracy_decimals: 1 # Now shows one decimal for humidity
    force_update: true # Ensure updates even if value doesn't change significantly


text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"

  - platform: version
    name: "ESPHome Version"

# Global variable to control display state
globals:
  - id: show_display_content
    type: bool
    restore_value: true # Remember the last state after reboot
    initial_value: "true" # Start with the display content showing by default

# Switch to toggle display content
switch:
  - platform: template
    name: "Matrix Display Content" # Name of the switch in Home Assistant
    id: matrix_display_toggle
    restore_mode: RESTORE_DEFAULT_ON # Restore to the last state, or ON if first boot
    turn_on_action:
      - globals.set:
          id: show_display_content
          value: "true"
      # When turning content ON, the display lambda will automatically start drawing.
    turn_off_action:
      - globals.set:
          id: show_display_content
          value: "false"
      - light.turn_off: led_matrix # Important: Turn off the base light when content is off to clear the display

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO14
    num_leds: 64
    rgb_order: RGB
    name: "8x8 LED Matrix"
    id: led_matrix
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_flicker:
      - addressable_fireworks:
      - addressable_random_twinkle:

# Font (must be in your ESPHome config folder)
font:
  - file: "pixelmix.ttf"
    id: pixel_font
    size: 8

# Display: Scroll temperature and humidity continuously
display:
  - platform: addressable_light
    id: led_matrix_display
    addressable_light_id: led_matrix
    width: 8
    height: 8
    rotation: 0
    update_interval: 150ms # KEPT AT 150ms as requested
    lambda: |-
      #include <string> // Include for std::string usage
      #include <cmath>  // Include for std::isnan and fmod

      // Define static variables outside the conditional block to maintain scope
      static int x_offset = 8;
      static int text_pixel_width = 0; // Initialize, will be calculated later

      // --- CHANGED: For pause between loops to 1 second (1000ms) ---
      static bool is_paused = false;
      static unsigned long pause_start_time = 0;
      const unsigned long PAUSE_DURATION_MS = 1000; // 1.0 seconds pause

      // Check the state of the 'show_display_content' global variable.
      if (!id(show_display_content)) {
        // If content is not to be shown (switch is OFF), simply clear the display (fill with black)
        // and return. This allows the 'led_matrix' light component to control
        // the LEDs without interference from text drawing.
        it.fill(Color::BLACK);
        // Reset pause state and x_offset when display content is turned off
        is_paused = false;
        x_offset = 8;
        return;
      }

      // Handle the pause between loops
      if (is_paused) {
        it.fill(Color::BLACK); // Keep screen clear during the pause
        if (millis() - pause_start_time >= PAUSE_DURATION_MS) {
          is_paused = false; // End the pause
          x_offset = 8;      // Reset x_offset to start scrolling from right after pause
        }
        return; // Don't draw text while paused
      }

      // If 'show_display_content' is true and not paused, proceed with drawing.

      // Get the current temperature value from the Home Assistant sensor.
      float temp = id(indoor_temp_sensor).state;
      // Get the current humidity value from the Home Assistant sensor.
      float humidity = id(indoor_humidity_sensor).state;


      // Create buffers for the temperature and humidity strings.
      char temp_buffer[10];
      char humidity_buffer[10];

      // Format the temperature string. Handle invalid sensor state (e.g., NaN).
      if (std::isnan(temp)) {
          snprintf(temp_buffer, sizeof(temp_buffer), "---C"); // Show "---C" if value is not available
      } else {
          // Format with 0 decimal places if it's a whole number, otherwise 1 decimal place.
          if (fmod(temp, 1.0) == 0.0) {
              snprintf(temp_buffer, sizeof(temp_buffer), "%.0fC", temp);
          } else {
              snprintf(temp_buffer, sizeof(temp_buffer), "%.1fC", temp);
          }
      }

      // Format the humidity string. Handle invalid sensor state (e.g., NaN).
      if (std::isnan(humidity)) {
          snprintf(humidity_buffer, sizeof(humidity_buffer), "---H"); // Show "---H" if value is not available
      } else {
          snprintf(humidity_buffer, sizeof(humidity_buffer), "%.1f%%H", humidity); // Shows one decimal, e.g., "67.5%H"
      }

      // Construct the full text string to be displayed (Temperature and Humidity).
      // Added some spaces for visual separation between the two values.
      std::string full_text = std::string(temp_buffer) + "    " + std::string(humidity_buffer) + "    "; // Add trailing spaces to create a pause before looping

      // Calculate the approximate pixel width of the entire text string.
      // The pixelmix font at size 8 typically uses about 6 pixels per character horizontally.
      text_pixel_width = full_text.length() * 6; // Assign to static variable

      // Clear the display by filling it with black color before drawing new content.
      it.fill(Color::BLACK);
      // Print the full text string on the display at the current x_offset.
      it.print(x_offset, 0, id(pixel_font), Color(0xFF, 0xFF, 0x00), full_text.c_str());

      // Decrement the x_offset to move the text one pixel to the left for the next update.
      x_offset--;

      // Check if the entire text has scrolled completely off the left side of the display.
      if (x_offset < -text_pixel_width) {
        // If it's off-screen, initiate a pause
        is_paused = true;
        pause_start_time = millis(); // Record the time the pause started
      }
